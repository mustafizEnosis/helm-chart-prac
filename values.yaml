# Default values for sample-nodejs-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  env:
    ORG_NAME: "ENOSIS"


# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 2

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: mustafizur996/dev-ops-eval 
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1e93bd1"

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: [regcred]
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

containerPorts:
  http: 8080

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP 
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080
  targetPort: 8080
  nodePort: 30083

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  ## @param ingress.pathType Ingress path type
  pathType: ImplementationSpecific
  ## @param ingress.path Default path for the ingress record
  ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
  ##
  path: /
  ## @param ingress.hostname Default host for the ingress record. The hostname is templated and thus can contain other variable references.
  ##
  hostname: sample.nodejs.helm
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

ingress-nginx:
  controller:
    service:
      type: LoadBalancer

aws-load-balancer-controller:
  enabled: true # Enable the subchart (if you used a condition)
  clusterName: "demo-eks" # Required for LBC
  serviceAccount:
    create: true # Assuming you're managing SA separately with eksctl/terraform
 

datadog:
  # Global settings for the Datadog Agent
  global:
    # Replace <YOUR_DATADOG_SITE> with your Datadog site (e.g., datadoghq.com, us3.datadoghq.com, eu.datadoghq.com)
    site: datadoghq.com
    clusterName: "demo-eks" # Recommended for EKS to ensure proper cluster identification

  # API and App Keys (stored in a Kubernetes Secret, best practice)
  # Ensure you create this secret beforehand:
  # kubectl create secret generic datadog-secret --from-literal api-key=<YOUR_DATADOG_API_KEY> --from-literal app-key=<YOUR_DATADOG_APP_KEY>
  apiSecret:
    secretName: datadog-secret
    keyName: api-key
  appSecret:
    secretName: datadog-secret
    keyName: app-key

  # Enable/Disable various Datadog Agent features
  features:
    logCollection:
      enabled: true
    apm:
      enabled: true
    processAgent:
      enabled: true
    orchestratorExplorer:
      enabled: true # Recommended for Kubernetes monitoring

  # Agent and Cluster Agent specific configurations
  agent:
    image:
      # Optional: specify a particular Datadog Agent image version if needed
      # tag: 7.50.0 # Example tag, always use the latest compatible version
      pullPolicy: IfNotPresent
    # Add any other agent-specific configurations here (e.g., resources, tolerations)
    # resources:
    #   requests:
    #     cpu: 100m
    #     memory: 256Mi
    #   limits:
    #     cpu: 200m
    #     memory: 512Mi

  clusterAgent:
    enabled: true
    image:
      pullPolicy: IfNotPresent